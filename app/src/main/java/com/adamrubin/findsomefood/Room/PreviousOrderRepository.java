package com.adamrubin.findsomefood.Room;

import android.app.Application;
import android.os.AsyncTask;

import androidx.lifecycle.LiveData;

import java.util.List;

public class PreviousOrderRepository {
    private PreviousOrderDao previousOrderDao;
    private LiveData<List<PreviousOrder>> allOrders;

    /**
     * Constructor
     * @param application
     */
    //application is subclass of context, can use to create database
    public PreviousOrderRepository(Application application) {
        PreviousOrderDatabase database = PreviousOrderDatabase.getInstance(application);
        //abstract from NoteBatabase being called here to construct
        previousOrderDao = database.orderDao();
        //again actual method we're calling has been autogenerated
        allOrders = previousOrderDao.getAllOrders();
    }

    /**
     * Public methods available to ViewModel
     * @param note
     */
    public void insert(PreviousOrder note) {
        //a new asynctask for every operation, executed with the relevant data passed in
        new InsertOrderAsyncTask(previousOrderDao).execute(note);
    }

    public void update(PreviousOrder note) {
        new UpdateOrderAsyncTask(previousOrderDao).execute(note);
    }

    public void delete(PreviousOrder note) {
        new DeleteOrderAsyncTask(previousOrderDao).execute(note);
    }

    public void deleteAllOrders() {
        new DeleteAllOrdersAsyncTask(previousOrderDao).execute();
    }

    //room will deal with this, so doesn't need to be in background
    public LiveData<List<PreviousOrder>> getAllOrders() {
        return allOrders;
    }


    /**
     * AsyncTasks
     */
    //static to avoid linking to respository itself, avoids memory leak
    //and needs to be on background to run at all
    //BUT ASYNCTASK IS DEPRECATED AFTER API30
    private static class InsertOrderAsyncTask extends AsyncTask<PreviousOrder, Void, Void> {
        private PreviousOrderDao previousOrderDao;

        //can't access directly because static, so we get via constructor
        private InsertOrderAsyncTask(PreviousOrderDao previousOrderDao) {
            this.previousOrderDao = previousOrderDao;
        }

        @Override
        protected Void doInBackground(PreviousOrder... previousOrders) {
            //passing in VarArgs, which functions here like an array
            previousOrderDao.insert(previousOrders[0]);
            return null;
        }
    }

    //new class for every action!
    private static class UpdateOrderAsyncTask extends AsyncTask<PreviousOrder, Void, Void> {
        private PreviousOrderDao previousOrderDao;

        //can't access directly because static, so we get via constructor
        private UpdateOrderAsyncTask(PreviousOrderDao previousOrderDao) {
            this.previousOrderDao = previousOrderDao;
        }

        @Override
        protected Void doInBackground(PreviousOrder... previousOrders) {
            //passing in VarArgs, which functions here like an array
            previousOrderDao.update(previousOrders[0]);
            return null;
        }
    }

    private static class DeleteOrderAsyncTask extends AsyncTask<PreviousOrder, Void, Void> {
        private PreviousOrderDao previousOrderDao;

        //can't access directly because static, so we get via constructor
        private DeleteOrderAsyncTask(PreviousOrderDao previousOrderDao) {
            this.previousOrderDao = previousOrderDao;
        }

        @Override
        protected Void doInBackground(PreviousOrder... previousOrders) {
            //passing in VarArgs, which functions here like an array
            previousOrderDao.delete(previousOrders[0]);
            return null;
        }
    }

    private static class DeleteAllOrdersAsyncTask extends AsyncTask<Void, Void, Void> {
        private PreviousOrderDao previousOrderDao;

        //can't access directly because static, so we get via constructor
        private DeleteAllOrdersAsyncTask(PreviousOrderDao previousOrderDao) {
            this.previousOrderDao = previousOrderDao;
        }

        @Override
        protected Void doInBackground(Void... voids) {
            //passing in VarArgs, which functions here like an array
            previousOrderDao.deleteAllOrders();
            return null;
        }
    }
}
